(function(){"use strict";var t={1279:function(t,e,a){var i=a(5130),s=a(6768);const r=(0,s.Lk)("footer",null,"This application is a fan-made tool for personal use, not intended for commercial or profit purposes. All intellectual property, including game mechanics, names, and images, are the property of Games Workshop, and this application is not endorsed or affiliated with them in any way.",-1);function l(t,e,a,i,l,o){const n=(0,s.g2)("router-view");return(0,s.uX)(),(0,s.CE)(s.FK,null,[(0,s.bF)(n),r],64)}var o={name:"App"},n=a(1241);const u=(0,n.A)(o,[["render",l]]);var d=u,c=a(1387),h=a.p+"img/AoSlogo.c555c2d8.jpg",p=a.p+"img/AoSGenHandbookOrder_Feature1nd.ca13519e.jpg",m=a.p+"img/AoSGenHandbook-Destruction_Feature1tp.389d4324.jpg",v=a.p+"img/AoSGenHandbook-Chaos_Feature1gr.5b9dcc69.jpg",f=a.p+"img/AoSGenHandbookDeath_Feature.74f3d214.jpg";const k=t=>((0,s.Qi)("data-v-f0555842"),t=t(),(0,s.jt)(),t),b={id:"container"},g=k((()=>(0,s.Lk)("div",{class:"home"},[(0,s.Lk)("img",{alt:"AoS Logo",src:h})],-1))),w=(0,s.Fv)('<div id="l-aside" data-v-f0555842><img class="pic" src="'+p+'" alt="order" data-v-f0555842><img class="pic" src="'+m+'" alt="Destruction" data-v-f0555842></div><div id="r-aside" data-v-f0555842><img class="pic" src="'+v+'" alt="chaos" data-v-f0555842><img class="pic" src="'+f+'" alt="death" data-v-f0555842></div>',2);function L(t,e,a,i,r,l){const o=(0,s.g2)("nav-bar"),n=(0,s.g2)("calculator");return(0,s.uX)(),(0,s.CE)("div",b,[g,(0,s.bF)(o,{id:"nav"}),(0,s.bF)(n,{id:"calc"}),w])}var y=a(4232);const R=t=>((0,s.Qi)("data-v-0a928012"),t=t(),(0,s.jt)(),t),C={id:"container"},E=R((()=>(0,s.Lk)("h1",{id:"title"},"Damage Calculator",-1))),_=R((()=>(0,s.Lk)("label",{for:"attacks",class:"attacks"},"Number of Attacks",-1))),D=R((()=>(0,s.Lk)("label",{for:"hitRate",class:"hit"},"Weapon Skill/Ballistic Skill",-1))),V=["value"],X=R((()=>(0,s.Lk)("label",{for:"critChance"},"Crit Chance",-1))),O=["value"],A=R((()=>(0,s.Lk)("label",{for:"critEffect"},"Crit Effect",-1))),W=R((()=>(0,s.Lk)("label",{for:"woundRate"},"Wound Rate",-1))),F=["value"],x=R((()=>(0,s.Lk)("label",{for:"rend"},"Rend",-1))),H=R((()=>(0,s.Lk)("label",{for:"damage"},"Damage",-1))),S=R((()=>(0,s.Lk)("label",{for:"saveRate"},"Save",-1))),I=["value"],M={id:"wards"},U=R((()=>(0,s.Lk)("label",{for:"hasWard"},"Ward Save (use 7 if no save)",-1))),j=["value"],Q={id:"rerolls"},K=R((()=>(0,s.Lk)("label",{for:"hasRerollhits"},"Reroll Hits of 1",-1))),T=R((()=>(0,s.Lk)("input",{type:"submit",value:"Submit"},null,-1))),N={key:0,id:"results-container"},$={id:"results-hits"},B={id:"total-hits"},J={id:"criticals"},G={id:"final-hits"},P={id:"results-wounds"},q={id:"wounds"},z={id:"total-wounds"},Y={id:"save-ward"},Z={id:"saves"},tt={id:"warded"},et={id:"damage-done"},at={id:"damage-inflicted"};function it(t,e,a,r,l,o){return(0,s.uX)(),(0,s.CE)("div",C,[E,(0,s.Lk)("form",{id:"unitStats",onSubmit:e[10]||(e[10]=(0,i.D$)(((...t)=>o.calculateDamage&&o.calculateDamage(...t)),["prevent"]))},[_,(0,s.bo)((0,s.Lk)("input",{"onUpdate:modelValue":e[0]||(e[0]=t=>l.attacks=t),type:"number",class:"attacks"},null,512),[[i.Jo,l.attacks]]),D,(0,s.bo)((0,s.Lk)("select",{type:"number",class:"hit",id:"hitRate","onUpdate:modelValue":e[1]||(e[1]=t=>l.hitrate=t)},[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(o.hitOptions,(t=>((0,s.uX)(),(0,s.CE)("option",{key:t,value:t},(0,y.v_)(t),9,V)))),128))],512),[[i.u1,l.hitrate]]),X,(0,s.bo)((0,s.Lk)("select",{id:"critChance",class:"crit","onUpdate:modelValue":e[2]||(e[2]=t=>l.critrate=t)},[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(o.critChanceOptions,(t=>((0,s.uX)(),(0,s.CE)("option",{key:t,value:t},(0,y.v_)(t),9,O)))),128))],512),[[i.u1,l.critrate]]),A,(0,s.bo)((0,s.Lk)("select",{id:"critEffect",class:"crit","onUpdate:modelValue":e[3]||(e[3]=e=>t.critEffects=e)},[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(o.critOptions,(t=>((0,s.uX)(),(0,s.CE)("option",{key:t.name},(0,y.v_)(t.name),1)))),128))],512),[[i.u1,t.critEffects]]),W,(0,s.bo)((0,s.Lk)("select",{type:"number",class:"wound",id:"woundRate","onUpdate:modelValue":e[4]||(e[4]=t=>l.woundRate=t)},[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(o.woundOptions,(t=>((0,s.uX)(),(0,s.CE)("option",{key:t,value:t},(0,y.v_)(t),9,F)))),128))],512),[[i.u1,l.woundRate]]),x,(0,s.bo)((0,s.Lk)("input",{"onUpdate:modelValue":e[5]||(e[5]=t=>l.rend=t),type:"number"},null,512),[[i.Jo,l.rend]]),H,(0,s.bo)((0,s.Lk)("input",{"onUpdate:modelValue":e[6]||(e[6]=t=>l.damage=t),type:"number"},null,512),[[i.Jo,l.damage]]),S,(0,s.bo)((0,s.Lk)("select",{type:"number",class:"save",id:"saveRate","onUpdate:modelValue":e[7]||(e[7]=t=>l.saveRate=t)},[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(o.saveOptions,(t=>((0,s.uX)(),(0,s.CE)("option",{key:t,value:t},(0,y.v_)(t),9,I)))),128))],512),[[i.u1,l.saveRate]]),(0,s.Lk)("div",M,[U,(l.hasWard=!0)?(0,s.bo)(((0,s.uX)(),(0,s.CE)("select",{key:0,type:"number",id:"ward","onUpdate:modelValue":e[8]||(e[8]=t=>l.wardRate=t)},[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(o.wardOptions,(t=>((0,s.uX)(),(0,s.CE)("option",{key:t,value:t},(0,y.v_)(t),9,j)))),128))],512)),[[i.u1,l.wardRate]]):(0,s.Q3)("",!0)]),(0,s.Lk)("div",Q,[K,(0,s.bo)((0,s.Lk)("input",{type:"checkbox","onUpdate:modelValue":e[9]||(e[9]=t=>l.hasRerolls=t)},null,512),[[i.lH,l.hasRerolls]])]),T],32),l.results?((0,s.uX)(),(0,s.CE)("div",N,[(0,s.Lk)("div",$,[(0,s.Lk)("h3",B,"Total Hits: "+(0,y.v_)(l.results.totalHits),1),(0,s.Lk)("h3",J,"Critical Hits: "+(0,y.v_)(l.results.criticals),1),(0,s.Lk)("h3",G,"Final Hits: "+(0,y.v_)(l.results.finalHits),1)]),(0,s.Lk)("div",P,[(0,s.Lk)("h3",q,"Total Wounds: "+(0,y.v_)(l.results.wounds),1),(0,s.Lk)("h3",z,"Final Wounds: "+(0,y.v_)(l.results.totalWounds),1)]),(0,s.Lk)("div",Y,[(0,s.Lk)("h3",Z,"Saves: "+(0,y.v_)(l.results.saves),1),(0,s.Lk)("h3",tt,"Warded: "+(0,y.v_)(l.results.warded),1)]),(0,s.Lk)("div",et,[(0,s.Lk)("h3",at,"Damage: "+(0,y.v_)(l.results.damage),1)])])):(0,s.Q3)("",!0)])}a(4114);var st={name:"DamageCalc",data(){return{attacks:0,hitrate:0,critrate:0,woundRate:0,rend:0,damage:0,saveRate:0,wardRate:0,number:null,minValue:2,maxValue:6,hasWard:!1,hasRerolls:!1,results:null,crits:[{name:"None",id:!1},{name:"Auto Wound",id:!1},{name:"Mortals",id:!1},{name:"Extra Hits",id:!1}]}},computed:{hitOptions(){let t=[];for(let e=this.minValue;e<=this.maxValue;e++)t.push(e);return t},woundOptions(){let t=[];for(let e=this.minValue;e<=this.maxValue;e++)t.push(e);return t},saveOptions(){let t=[];for(let e=this.minValue;e<=this.maxValue;e++)t.push(e);return t.unshift(1),t.push(7),t},wardOptions(){let t=[];for(let e=this.minValue+2;e<=this.maxValue;e++)t.push(e);return t.push(7),t},critOptions(){return this.crits},critChanceOptions(){let t=[];for(let e=this.minValue;e<=this.maxValue;e++)t.push(e);return t}},methods:{calculateDamage(){if(!this.validateInputs())return;this.hitrate>this.critrate&&"Mortals"!==this.critEffects&&(this.critrate=this.hitrate);let t=this.attacks*((7-this.hitrate)/6),e=this.attacks*((7-this.critrate)/6),a=0,i=0,s=0,r=0,l=0,o=t,n=0;if(this.hasRerolls){let t=this.attacks*(1/6),a=t*((7-this.hitrate)/6),i=t*((7-this.critrate)/6);a-=i,e+=i,o+=a}"Auto Wound"===this.critEffects?(o-=e,a+=e):"Mortals"===this.critEffects?(o-=e,s+=e):"Extra Hits"===this.critEffects&&(o+=e),o>0&&(i=o*((7-this.woundRate)/6),a+=i,r=Math.max(0,a*((7-(this.saveRate+this.rend))/6)),n=this.damage*(a-r)),this.wardRate<7&&(l=Math.min(n,n*((7-this.wardRate)/6)),n=Math.max(0,n-l)),s>0&&(s*=this.damage,l=Math.min(s,s*((7-this.wardRate)/6)),n+=s-l),o<0&&(o=e),this.results={totalHits:Math.round(100*t)/100,criticals:Math.round(100*e)/100,finalHits:Math.round(100*o)/100,wounds:Math.round(100*i)/100,totalWounds:Math.round(100*a/100),saves:Math.round(100*r)/100,damage:Math.round(100*n)/100,warded:Math.round(100*l)/100}},validateInputs(){return this.attacks<1?(alert("Attacks must be at least 1"),!1):this.hitrate<2||this.hitrate>6?(alert("Hit rate must be between 2 and 6"),!1):this.woundRate<2||this.woundRate>6?(alert("Wound rate must be between 2 and 6"),!1):this.rend<0?(alert("Rend cannot be negative"),!1):!(this.damage<1)||(alert("Damage must be at least 1"),!1)}}};const rt=(0,n.A)(st,[["render",it],["__scopeId","data-v-0a928012"]]);var lt=rt;const ot={key:1,id:"bar"},nt={key:3,id:"bar"};function ut(t,e,a,i,r,l){const o=(0,s.g2)("RouterLink");return(0,s.uX)(),(0,s.CE)("nav",null,["about"!==this.$route.name?((0,s.uX)(),(0,s.Wv)(o,{key:0,to:"/"},{default:(0,s.k6)((()=>[(0,s.eW)("Home ")])),_:1})):(0,s.Q3)("",!0),"about"!==this.$route.name?((0,s.uX)(),(0,s.CE)("p",ot,"|")):(0,s.Q3)("",!0),"Damage Calculator"!==this.$route.name?((0,s.uX)(),(0,s.Wv)(o,{key:2,to:"/DamageCalculator"},{default:(0,s.k6)((()=>[(0,s.eW)(" Damage Calculator ")])),_:1})):(0,s.Q3)("",!0),"Damage Calculator"!==this.$route.name&&"Dice Roller"!==this.$route.name?((0,s.uX)(),(0,s.CE)("p",nt,"|")):(0,s.Q3)("",!0),"Dice Roller"!==this.$route.name?((0,s.uX)(),(0,s.Wv)(o,{key:4,to:"/DiceRoller"},{default:(0,s.k6)((()=>[(0,s.eW)(" Dice Roller")])),_:1})):(0,s.Q3)("",!0)])}var dt={name:"NavBar",data(){return{}}};const ct=(0,n.A)(dt,[["render",ut],["__scopeId","data-v-076f0d32"]]);var ht=ct,pt={name:"DamageCalc",components:{calculator:lt,NavBar:ht}};const mt=(0,n.A)(pt,[["render",L],["__scopeId","data-v-f0555842"]]);var vt=mt;const ft=t=>((0,s.Qi)("data-v-35891c6c"),t=t(),(0,s.jt)(),t),kt={id:"container"},bt=ft((()=>(0,s.Lk)("div",{class:"home"},[(0,s.Lk)("img",{alt:"AoS Logo",src:h})],-1))),gt=(0,s.Fv)('<div id="about" data-v-35891c6c><h1 id="title" data-v-35891c6c>Age of Sigmar Damage Calculator &amp; Dice Roller</h1><p class="descirption" data-v-35891c6c>This tool helps you calculate the probability of damage based on the offensive stats of one unit attacking another. It considers various factors like hit rate, wound rate, rend, and save, and presents the outcome as a percentage. For example, if your unit hits on 5&#39;s, the calculator will show that 33% of the attacks hit. If you make 20 attacks, youâ€™ll see a result of approximately 13.33 hits. This allows for both exact and probabilistic outcomes, making it a helpful resource for planning your strategy. Simply input the offensive stats of your unit attacks, hit rate, wound rate, rend, and any critical efects, and the defensive stats of your target: save, and ward (if a unit does not have either of these input 7). </p><p class="description" data-v-35891c6c> The Dice Roller simulates dice rolls using a random number generator, allowing you to replicate game results. It provides two types of output: first, a summary showing the total number of hits, wounds, and saves; and second, a detailed breakdown of each individual roll in the order they were made. Any rerolls or additional hits (displayed as the die rolling a 0) will be displayed at the end, making it easy to track the full sequence of results. </p></div><div id="l-aside" data-v-35891c6c><img class="pic" src="'+p+'" alt="order" data-v-35891c6c><img class="pic" src="'+m+'" alt="Destruction" data-v-35891c6c></div><div id="r-aside" data-v-35891c6c><img class="pic" src="'+v+'" alt="chaos" data-v-35891c6c><img class="pic" src="'+f+'" alt="death" data-v-35891c6c></div>',3);function wt(t,e,a,i,r,l){const o=(0,s.g2)("nav-bar");return(0,s.uX)(),(0,s.CE)("div",kt,[bt,(0,s.bF)(o,{id:"nav"}),gt])}var Lt={name:"AboutView",components:{NavBar:ht}};const yt=(0,n.A)(Lt,[["render",wt],["__scopeId","data-v-35891c6c"]]);var Rt=yt;const Ct=t=>((0,s.Qi)("data-v-4eef22b0"),t=t(),(0,s.jt)(),t),Et={id:"container"},_t=Ct((()=>(0,s.Lk)("div",{class:"home"},[(0,s.Lk)("img",{alt:"AoS Logo",src:h})],-1))),Dt=(0,s.Fv)('<div id="l-aside" data-v-4eef22b0><img class="pic" src="'+p+'" alt="order" data-v-4eef22b0><img class="pic" src="'+m+'" alt="Destruction" data-v-4eef22b0></div><div id="r-aside" data-v-4eef22b0><img class="pic" src="'+v+'" alt="chaos" data-v-4eef22b0><img class="pic" src="'+f+'" alt="death" data-v-4eef22b0></div>',2);function Vt(t,e,a,i,r,l){const o=(0,s.g2)("nav-bar"),n=(0,s.g2)("DiceRoller");return(0,s.uX)(),(0,s.CE)("div",Et,[_t,(0,s.bF)(o,{id:"nav"}),(0,s.bF)(n,{id:"roller"}),Dt])}const Xt=t=>((0,s.Qi)("data-v-95dc03d4"),t=t(),(0,s.jt)(),t),Ot={id:"container"},At=Xt((()=>(0,s.Lk)("h1",{id:"title"},"Dice Roller",-1))),Wt=Xt((()=>(0,s.Lk)("label",{for:"attacks",class:"attacks"},"Number of Attacks",-1))),Ft=Xt((()=>(0,s.Lk)("label",{for:"hitRate",class:"hit"},"Weapon Skill/Ballistic Skill",-1))),xt=["value"],Ht=Xt((()=>(0,s.Lk)("label",{for:"critChance"},"Crit Chance",-1))),St=["value"],It=Xt((()=>(0,s.Lk)("label",{for:"critEffect"},"Crit Effect",-1))),Mt=Xt((()=>(0,s.Lk)("label",{for:"woundRate"},"Wound Rate",-1))),Ut=["value"],jt=Xt((()=>(0,s.Lk)("label",{for:"rend"},"Rend",-1))),Qt=Xt((()=>(0,s.Lk)("label",{for:"damage"},"Damage",-1))),Kt=Xt((()=>(0,s.Lk)("label",{for:"saveRate"},"Save",-1))),Tt=["value"],Nt={id:"wards"},$t=Xt((()=>(0,s.Lk)("label",{for:"hasWard"},"Ward Save (use 7 if no save)",-1))),Bt=["value"],Jt={id:"rerolls"},Gt=Xt((()=>(0,s.Lk)("label",{for:"hasRerollhits"},"Reroll Hits of 1",-1))),Pt=Xt((()=>(0,s.Lk)("input",{type:"submit",value:"Submit"},null,-1))),qt={key:0,id:"results-container"},zt={id:"results-hits"},Yt={id:"total-hits"},Zt={id:"criticals"},te={id:"results-wounds"},ee={id:"wounds"},ae={id:"save-ward"},ie={id:"saves"},se={id:"warded"},re={id:"damage-done"},le={id:"damage-inflicted"};function oe(t,e,a,r,l,o){return(0,s.uX)(),(0,s.CE)("div",Ot,[At,(0,s.Lk)("form",{id:"unitStats",onSubmit:e[10]||(e[10]=(0,i.D$)(((...t)=>o.calculateDamage&&o.calculateDamage(...t)),["prevent"]))},[Wt,(0,s.bo)((0,s.Lk)("input",{"onUpdate:modelValue":e[0]||(e[0]=t=>l.attacks=t),type:"number",class:"attacks"},null,512),[[i.Jo,l.attacks]]),Ft,(0,s.bo)((0,s.Lk)("select",{type:"number",class:"hit",id:"hitRate","onUpdate:modelValue":e[1]||(e[1]=t=>l.hitrate=t)},[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(o.hitOptions,(t=>((0,s.uX)(),(0,s.CE)("option",{key:t,value:t},(0,y.v_)(t),9,xt)))),128))],512),[[i.u1,l.hitrate]]),Ht,(0,s.bo)((0,s.Lk)("select",{id:"critChance",class:"crit","onUpdate:modelValue":e[2]||(e[2]=t=>l.critrate=t)},[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(o.critChanceOptions,(t=>((0,s.uX)(),(0,s.CE)("option",{key:t,value:t},(0,y.v_)(t),9,St)))),128))],512),[[i.u1,l.critrate]]),It,(0,s.bo)((0,s.Lk)("select",{id:"critEffect",class:"crit","onUpdate:modelValue":e[3]||(e[3]=e=>t.critEffects=e)},[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(o.critOptions,(t=>((0,s.uX)(),(0,s.CE)("option",{key:t.name},(0,y.v_)(t.name),1)))),128))],512),[[i.u1,t.critEffects]]),Mt,(0,s.bo)((0,s.Lk)("select",{type:"number",class:"wound",id:"woundRate","onUpdate:modelValue":e[4]||(e[4]=t=>l.woundRate=t)},[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(o.woundOptions,(t=>((0,s.uX)(),(0,s.CE)("option",{key:t,value:t},(0,y.v_)(t),9,Ut)))),128))],512),[[i.u1,l.woundRate]]),jt,(0,s.bo)((0,s.Lk)("input",{"onUpdate:modelValue":e[5]||(e[5]=t=>l.rend=t),type:"number"},null,512),[[i.Jo,l.rend]]),Qt,(0,s.bo)((0,s.Lk)("input",{"onUpdate:modelValue":e[6]||(e[6]=t=>l.damage=t),type:"number"},null,512),[[i.Jo,l.damage]]),Kt,(0,s.bo)((0,s.Lk)("select",{type:"number",class:"save",id:"saveRate","onUpdate:modelValue":e[7]||(e[7]=t=>l.saveRate=t)},[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(o.saveOptions,(t=>((0,s.uX)(),(0,s.CE)("option",{key:t,value:t},(0,y.v_)(t),9,Tt)))),128))],512),[[i.u1,l.saveRate]]),(0,s.Lk)("div",Nt,[$t,(l.hasWard=!0)?(0,s.bo)(((0,s.uX)(),(0,s.CE)("select",{key:0,type:"number",id:"ward","onUpdate:modelValue":e[8]||(e[8]=t=>l.wardRate=t)},[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(o.wardOptions,(t=>((0,s.uX)(),(0,s.CE)("option",{key:t,value:t},(0,y.v_)(t),9,Bt)))),128))],512)),[[i.u1,l.wardRate]]):(0,s.Q3)("",!0)]),(0,s.Lk)("div",Jt,[Gt,(0,s.bo)((0,s.Lk)("input",{type:"checkbox","onUpdate:modelValue":e[9]||(e[9]=t=>l.hasRerolls=t)},null,512),[[i.lH,l.hasRerolls]])]),Pt],32),l.results?((0,s.uX)(),(0,s.CE)("div",qt,[(0,s.Lk)("div",zt,[(0,s.Lk)("h3",Yt,"Total Hits: "+(0,y.v_)(l.results.totalHits.length)+" "+(0,y.v_)(l.results.totalHits),1),(0,s.Lk)("h3",Zt,"Critical Hits:"+(0,y.v_)(l.results.criticals.length)+" "+(0,y.v_)(l.results.criticals),1)]),(0,s.Lk)("div",te,[(0,s.Lk)("h3",ee,"Total Wounds:"+(0,y.v_)(l.results.wounds.length)+" "+(0,y.v_)(l.results.wounds),1)]),(0,s.Lk)("div",ae,[(0,s.Lk)("h3",ie,"Saves:"+(0,y.v_)(l.results.saves.length)+" "+(0,y.v_)(l.results.saves),1),(0,s.Lk)("h3",se,"Warded:"+(0,y.v_)(l.results.warded.length)+" "+(0,y.v_)(l.results.warded),1)]),(0,s.Lk)("div",re,[(0,s.Lk)("h3",le,"Damage: "+(0,y.v_)(l.results.damage),1)])])):(0,s.Q3)("",!0)])}var ne={name:"DiceRoller",data(){return{attacks:0,hitrate:0,critrate:0,woundRate:0,rend:0,damage:0,saveRate:0,wardRate:0,number:null,minValue:2,maxValue:6,hasWard:!1,hasRerolls:!1,results:{totalHits:[],criticals:[],wounds:[],saves:[],damage:0,warded:[]},crits:[{name:"None",id:!1},{name:"Auto Wound",id:!1},{name:"Mortals",id:!1},{name:"Extra Hits",id:!1}]}},computed:{hitOptions(){let t=[];for(let e=this.minValue;e<=this.maxValue;e++)t.push(e);return t},woundOptions(){let t=[];for(let e=this.minValue;e<=this.maxValue;e++)t.push(e);return t},saveOptions(){let t=[];for(let e=this.minValue;e<=this.maxValue;e++)t.push(e);return t.unshift(1),t.push(7),t},wardOptions(){let t=[];for(let e=this.minValue+2;e<=this.maxValue;e++)t.push(e);return t.push(7),t},critOptions(){return this.crits},critChanceOptions(){let t=[];for(let e=this.minValue;e<=this.maxValue;e++)t.push(e);return t}},methods:{rollDice(t=1,e=6){return Math.floor(Math.random()*(e-t+1))+t},calculateDamage(){if(!this.validateInputs())return;this.hitrate>this.critrate&&"Mortals"!==this.critEffects&&(this.critrate=this.hitrate);let t=[],e=0,a=[],i=[],s=0,r=[],l=[],o=[],n=Array.from({length:this.attacks},(()=>this.rollDice()));if(n.forEach((t=>{1===t&&this.hasRerolls&&(t=this.rollDice()),t>=this.hitrate&&t<this.critrate&&l.push(t),t>=this.critrate&&o.push(t)})),"Extra Hits"===this.critEffects)for(let d=0;d<o.length;d++)l.push(o[d]),l.push(0);if("None"===this.critEffects)for(let d=0;d<o.length;d++)l.push(o[d]);t=Array.from({length:l.length},(()=>this.rollDice()));for(let d=t.length-1;d>=0;d--)t[d]<this.woundRate&&t.splice(d,1);if("Auto Wound"===this.critEffects)for(let d=0;d<o.length;d++)t.push(o[d]);a=Array.from({length:t.length},(()=>this.rollDice()));for(let d=a.length-1;d>=0;d--)a[d]<this.saveRate+this.rend&&(r.push(a[d]),a.splice(d,1));"Mortals"===this.critEffects&&(e=o.length*this.damage);const u=r.length*this.damage+e;while(r.length<u)r.push(0);for(let d=r.length-1;d>=0;d--){const t=this.rollDice();t>=this.wardRate?i.push(t):s++}this.results={totalHits:[...l],criticals:[...o],wounds:[...t],saves:[...a],damage:s,warded:[...i]}},validateInputs(){return this.attacks<1?(alert("Attacks must be at least 1"),!1):this.hitrate<2||this.hitrate>6?(alert("Hit rate must be between 2 and 6"),!1):this.woundRate<2||this.woundRate>6?(alert("Wound rate must be between 2 and 6"),!1):this.rend<0?(alert("Rend cannot be negative"),!1):!(this.damage<1)||(alert("Damage must be at least 1"),!1)}}};const ue=(0,n.A)(ne,[["render",oe],["__scopeId","data-v-95dc03d4"]]);var de=ue,ce={name:"DiceRollerView",components:{DiceRoller:de,NavBar:ht}};const he=(0,n.A)(ce,[["render",Vt],["__scopeId","data-v-4eef22b0"]]);var pe=he;const me=[{path:"/DamageCalculator",name:"Damage Calculator",component:vt},{path:"/DiceRoller",name:"Dice Roller",component:pe},{path:"/",name:"about",component:Rt}],ve=(0,c.aE)({history:(0,c.Bt)(),routes:me});var fe=ve,ke=a(782),be=(0,ke.y$)({state:{},getters:{},mutations:{},actions:{},modules:{}});(0,i.Ef)(d).use(be).use(fe).mount("#app")}},e={};function a(i){var s=e[i];if(void 0!==s)return s.exports;var r=e[i]={exports:{}};return t[i].call(r.exports,r,r.exports,a),r.exports}a.m=t,function(){var t=[];a.O=function(e,i,s,r){if(!i){var l=1/0;for(d=0;d<t.length;d++){i=t[d][0],s=t[d][1],r=t[d][2];for(var o=!0,n=0;n<i.length;n++)(!1&r||l>=r)&&Object.keys(a.O).every((function(t){return a.O[t](i[n])}))?i.splice(n--,1):(o=!1,r<l&&(l=r));if(o){t.splice(d--,1);var u=s();void 0!==u&&(e=u)}}return e}r=r||0;for(var d=t.length;d>0&&t[d-1][2]>r;d--)t[d]=t[d-1];t[d]=[i,s,r]}}(),function(){a.n=function(t){var e=t&&t.__esModule?function(){return t["default"]}:function(){return t};return a.d(e,{a:e}),e}}(),function(){a.d=function(t,e){for(var i in e)a.o(e,i)&&!a.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})}}(),function(){a.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"===typeof window)return window}}()}(),function(){a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)}}(),function(){a.p="/AoS-Calculator/"}(),function(){var t={524:0};a.O.j=function(e){return 0===t[e]};var e=function(e,i){var s,r,l=i[0],o=i[1],n=i[2],u=0;if(l.some((function(e){return 0!==t[e]}))){for(s in o)a.o(o,s)&&(a.m[s]=o[s]);if(n)var d=n(a)}for(e&&e(i);u<l.length;u++)r=l[u],a.o(t,r)&&t[r]&&t[r][0](),t[r]=0;return a.O(d)},i=self["webpackChunkcalc"]=self["webpackChunkcalc"]||[];i.forEach(e.bind(null,0)),i.push=e.bind(null,i.push.bind(i))}();var i=a.O(void 0,[504],(function(){return a(1279)}));i=a.O(i)})();
//# sourceMappingURL=app.c9366494.js.map